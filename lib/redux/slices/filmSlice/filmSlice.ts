/* Core */
import { createSlice } from "@reduxjs/toolkit";

/* Instruments */
import { getAllFilms, getFilm } from "./thunks";

const initialState: FilmSliceState = {
  value: [],
  status: "idle",
};

export const filmSlice = createSlice({
  name: "film",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllFilms.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllFilms.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload.map((film: FilmResponse) => (
          {
            detailsRetrieved: false,
            data: film
          }
        ));
      })
      .addCase(getFilm.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getFilm.fulfilled, (state, action) => {
        state.status = "idle";
        let filmIndex = -1;
        state.value.forEach((film, index) => {
          if (film.data.episode_id === action.payload.episode_id) {
            filmIndex = index;
          }
        });
        state.value[filmIndex] = {
          detailsRetrieved: true,
          data: action.payload
        };
      });
  },
});

/* Types */
export interface FilmSliceState {
  value: FilmResponseWithFlag[];
  status: "idle" | "loading" | "failed";
}

export type FilmResponseWithFlag = {
  detailsRetrieved: boolean;
  data: FilmResponse;
}

export type NodeFilmResponseWithFlag = {
  detailsRetrieved: boolean;
  data: NodeFilmResponse;
}

export type NodeFilmResponse = {
  fields: FilmResponse;
}

export type FilmResponse = {
  title: string;
  episode_id: number;
  opening_crawl: string;
  director: string;
  producer: string;
  release_date: string;
  characters: string[];
  planets: string[];
  starships: string[];
  vehicles: string[];
  species: string[];
  created: string;
  edited: string;
  url: string;
};

export type NodeFilmsResponse = {
  count: number;
  next: number | null;
  previous: number | null;
  results: NodeFilmResponse[];
}

export type FilmsResponse = {
  count: number;
  next: number | null;
  previous: number | null;
  results: FilmResponse[];
};

export type NodeCharactersResponse = {
  fields: CharactersResponse;
}

export type CharactersResponse = {
  name: string;
  height: string;
  mass: string;
  hair_color: string;
  skin_color: string;
  eye_color: string;
  birth_year: string;
  gender: string;
  homeworld: string;
  films: string[];
  species: string[];
  vehicles: string[];
  starships: string[];
  created: string;
  edited: string;
  url: string;
};

export type NodePlanetsResponse = {
  fields: PlanetsResponse;
}

export type PlanetsResponse = {
  name: string;
  rotation_period: string;
  orbital_period: string;
  diameter: string;
  climate: string;
  gravity: string;
  terrain: string;
  surface_water: string;
  population: string;
  residents: string[];
  films: string[];
  created: string;
  edited: string;
  url: string;
};

export type NodeStarshipsResponse = {
  fields: StarshipsResponse;
}

export type StarshipsResponse = {
  name: string;
  model: string;
  manufacturer: string;
  cost_in_credits: string;
  length: string;
  max_atmosphering_speed: string;
  crew: string;
  passengers: string;
  cargo_capacity: string;
  consumables: string;
  hyperdrive_rating: string;
  MGLT: string;
  starship_class: string;
  pilots: string[];
  films: string[];
  created: string;
  edited: string;
  url: string;
};

export type NodeVehiclesResponse = {
  fields: VehiclesResponse;
}

export type VehiclesResponse = {
  name: string;
  model: string;
  manufacturer: string;
  cost_in_credits: string;
  length: string;
  max_atmosphering_speed: string;
  crew: string;
  passengers: string;
  cargo_capacity: string;
  consumables: string;
  vehicle_class: string;
  pilots: string[];
  films: string[];
  created: string;
  edited: string;
  url: string;
};

export type NodeSpeciesResponse = {
  fields: SpeciesResponse;
}

export type SpeciesResponse = {
  name: string;
  classification: string;
  designation: string;
  average_height: string;
  skin_colors: string;
  hair_colors: string;
  eye_colors: string;
  average_lifespan: string;
  homeworld: string;
  language: string;
  people: string[];
  films: string[];
  created: string;
  edited: string;
  url: string;
};
